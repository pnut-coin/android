FILES

Your wallet and your private keys are stored in app internal storage:

/data/data/de.schildbach.wallet/files/wallet-protobuf (MODE_PRIVATE)
	Wallet for Mainnet

/data/data/de.schildbach.wallet_test/files/wallet-protobuf-testnet (MODE_WORLD_READABLE | MODE_WORLD_WRITEABLE)
	Wallet for Testnet

The wallet file format is not compatible to wallet.dat (Satoshi client). Rather, it uses a custom protobuf format
which should be compatible between clients using litecoinj.

Certain actions cause automatic rolling backups of your private keys to app-private storage:

/data/data/de.schildbach.wallet/files/key-backup-base58 (MODE_PRIVATE)
	Automatic backups of private keys for Mainnet

/data/data/de.schildbach.wallet_test/files/key-backup-base58-testnet (MODE_PRIVATE)
	Automatic backups of private keys for Testnet

Private keys can be manually backed up to and restored from external storage:

<<<<<<< HEAD
/sdcard/Download/dogecoin-wallet-keys-<yyyy-MM-dd>
	Manual backups of private keys for Mainnet

/sdcard/Download/dogecoin-wallet-keys-testnet-<yyyy-MM-dd>
	Manual backups of private keys for Testnet
=======
/sdcard/Download/litecoin-wallet-keys-<yyyy-MM-dd>
	Export of private keys for prodnet

/sdcard/Download/litecoin-wallet-keys-testnet-<yyyy-MM-dd>
	Export of private keys for testnet
>>>>>>> 1c3953416a3587c6efd1bab98be1eee9ceba1d2d

The manual backup files are encrypted using your chosen password. You can use OpenSSL to decrypt:

openssl enc -d -aes-256-cbc -a -in <filename>


DEBUGGING

Wallet file for Testnet can be pulled from an (even un-rooted) device using

	adb pull /data/data/de.schildbach.wallet_test/files/wallet-protobuf-testnet

Log messages can be viewed by

	adb logcat

The app can send extensive debug information. Use Options > Settings > Report Issue and follow the dialog.
In the generated e-mail, replace the support address with yours.


BUILDING THE DEVELOPMENT VERSION

It's important to know that the development version uses Testnet, is debuggable and the wallet file
is world readable/writeable. The goal is to be able to debug easily.

You can probably skip some steps, especially if you built Android apps before.

You'll need git, a Java SDK 6 (or later) and at least Maven 3 for this. I'll assume Ubuntu Linux
for the package installs.

	# first time only
	sudo apt-get install git maven openjdk-6-jdk

Get the Android SDK Tools from

	http://developer.android.com/sdk/

and unpack it to your workspace directory. Switch to that Android SDK directory, and use

	# first time only
	tools/android update sdk --no-ui --force --filter platform,platform-tools

to download the necessary API level.

Next, you need to build litecoinj. In your workspace, use

<<<<<<< HEAD
	# first time only
	git clone -b release-0.10 https://code.google.com/r/bitcoinj/ bitcoinj
	cd bitcoinj
	mvn clean install

Finally, you can build dogecoin Wallet and sign it with your development key. Again in your workspace,
use

	# first time only
	git clone -b master https://github.com/schildbach/bitcoin-wallet.git bitcoin-wallet

	# each time
	cd bitcoin-wallet
	git pull
=======
	git clone -b release-0.7 https://code.google.com/p/litecoinj/ litecoinj
	cd litecoinj
	mvn clean install

Finally, you can build Litecoin Wallet and sign it with your development key. Again in your workspace,
use

	git clone https://code.google.com/p/litecoin-wallet/ litecoin-wallet
	cd litecoin-wallet
>>>>>>> 1c3953416a3587c6efd1bab98be1eee9ceba1d2d
	mvn clean install -Dandroid.sdk.path=<path to your android sdk>

To upload the app to your Android device, use

	# first time only
	sudo apt-get install android-tools-adb

	# each time
	adb install wallet/target/wallet-*-test.apk


BUILDING THE PRODUCTIVE VERSION

At this point I'd like to remind that you continue on your own risk. According to the license,
there is basically no warranty and liability. It's your responsibility to audit the source code
for security issues and build, install and run the application in a secure way.

The productive version uses Mainnet, is built non-debuggable, space-optimized with ProGuard and the
wallet file is protected against access from non-root users. In the code repository, it lives in a
separate 'prod' branch that gets rebased against master with each released version.

	# each time
	cd bitcoin-wallet
	git fetch origin
	git checkout origin/prod
	mvn clean install -Prelease -Dandroid.sdk.path=<path to your android sdk>


SETTING UP FOR DEVELOPMENT

Make sure you've got Eclipse 3.7 (Indigo) with ADT 20 installed.

Use Git to check out the project and an Android library dependency to your workspace:

<<<<<<< HEAD
	# clone Dogecoin Wallet project
	git clone -b master https://github.com/schildbach/bitcoin-wallet.git bitcoin-wallet
=======
  git clone https://code.google.com/p/litecoin-wallet/ litecoin-wallet
>>>>>>> 1c3953416a3587c6efd1bab98be1eee9ceba1d2d

	# clone ActionBarSherlock library project
	git clone https://github.com/JakeWharton/ActionBarSherlock.git action-bar-sherlock
	cd action-bar-sherlock
	git checkout 4.1.0

Use the maven-eclipse-plugin to create Eclipse project files:

	cd bitcoin-wallet
	mvn eclipse:eclipse

Optional: In the generated .classpath, remove the org.eclipse.jdt.launching.JRE_CONTAINER
classpath entry. It does not belong there, but cannot be excluded from being generated currently.

In Eclipse, use File -> Import -> General -> Existing Project into Workspace to import project.

If you see loads of "should be tagged with @Override" errors, set Project -> Properties ->
Java Compiler -> Errors/Warnings -> Annotations -> Missing @Override annotation to 'Warning'


NFC (Near field communication)

<<<<<<< HEAD
Dogecoin Wallet supports reading Dogecoin requests via NFC, either from a passive NFC tag or from
=======
Litecoin Wallet supports reading Litecoin requests via NFC, either from a passive NFC tag or from
>>>>>>> 1c3953416a3587c6efd1bab98be1eee9ceba1d2d
another NFC capable Android device that is requesting coins.

For this to work, just enable NFC in your phone and hold your phone to the tag or device (with
the "Request coins" dialog open). The "Send coins" dialog will open with fields populated.

Instructions for preparing an NFC tag with your address:

- We have successfully tested this NFC tag writer:
  https://play.google.com/store/apps/details?id=com.nxp.nfc.tagwriter
  Other writers should work as well, let us know if you succeed.

- Some tags have less than 50 bytes capacity, those won't work. 1 KB tags recommended.

<<<<<<< HEAD
- The tag needs to contain a Dogecoin URI. You can construct one with the "Request coins" dialog,
  then share with messaging or email. You can also construct the URI manually. Example for Mainnet:
  dogecoin:DEwTHxztkSDUJEMywbPk5zVUGrupaNRqEy
=======
- The tag needs to contain a Litecoin URI. You can construct one with the "Request coins" dialog,
  then share with messaging or email. You can also construct the URI manually. Example for Prodnet:
  litecoin:1G2Y2jP5YFZ5RGk2PXaeWwbeA5y1ZtFhoL
>>>>>>> 1c3953416a3587c6efd1bab98be1eee9ceba1d2d

- The type of the message needs to be URI or URL (not Text).

- If you put your tag at a public place, don't forget to enable write protect. Otherwise, someone
<<<<<<< HEAD
  could overwrite the tag with his own Dogecoin address.
=======
  could overwrite the tag with his own Litecoin address.
>>>>>>> 1c3953416a3587c6efd1bab98be1eee9ceba1d2d


EXCHANGE RATES

<<<<<<< HEAD
Dogecoin Wallet reads this feed from "bitcoin charts" for getting exchange rates:
=======
Litecoin Wallet reads this feed from "litecoin charts" for getting exchange rates:
>>>>>>> 1c3953416a3587c6efd1bab98be1eee9ceba1d2d

	http://litecoincharts.com/t/weighted_prices.json

The feed is described on this page (see Weighted Prices):

	http://litecoincharts.com/about/markets-api/

I chose this feed because it is not dependent on a single exchange. However, you should keep in
mind it's always a 24h average (falling back to 7d or even 30d if no trade occurred for a long
time).

If Litecoincharts is not available, the feed from "Blockchain" is fetched instead:

	https://blockchain.info/ticker

The feed is described here:

	https://blockchain.info/api/exchange_rates_api


LITECOINJ

<<<<<<< HEAD
Dogecoin Wallet uses bitcoinj for Dogecoin specific logic:
=======
Litecoin Wallet uses litecoinj for Litecoin specific logic:
>>>>>>> 1c3953416a3587c6efd1bab98be1eee9ceba1d2d

http://code.google.com/p/litecoinj/
